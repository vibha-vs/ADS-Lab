#include <bits/stdc++.h>
using namespace std;
// Class to implement node
class Node {
public:
	int key;
	// Array to hold pointers to node of different level
	Node **forward;
	Node(int, int);
};
Node::Node(int key, int level) {
	this->key = key;
	// Allocate memory to forward
	forward = new Node*[level+1];
	// Fill forward array with 0(NULL)
	memset(forward, 0, sizeof(Node*)*(level+1));
};
// Class for Skip list
class SkipList {
	// Maximum level for this skip list
	int MAXLVL;
	// P is the fraction of the nodes with level
	// i pointers also having level i+1 pointers
	float P;
	// current level of skip list
	int level;
	// pointer to header node
	Node *header;
public:
	SkipList(int, float);
	int randomLevel();
	Node* createNode(int, int);
	void insertElement(int);
	void deleteElement(int);
	void searchElement(int);
	void displayList();
};
SkipList::SkipList(int MAXLVL, float P) {
	this->MAXLVL = MAXLVL;
	this->P = P;
	level = 0;
	// create header node and initialize key to -1
	header = new Node(-1, MAXLVL);
};
// create random level for node
int SkipList::randomLevel() {
	float r = (float)rand()/RAND_MAX;
	int lvl = 0;
	while(r < P && lvl < MAXLVL) {
		lvl++;
		r = (float)rand()/RAND_MAX;
	}
	return lvl;
};
// create new node
Node* SkipList::createNode(int key, int level) {
	Node *n = new Node(key, level);
	return n;
};
// Insert given key in skip list
void SkipList::insertElement(int key) {
	Node *current = header;
	// create update array and initialize it
	Node *update[MAXLVL+1];
	memset(update, 0, sizeof(Node*)*(MAXLVL+1));
	for(int i = level; i >= 0; i--) {
		while(current->forward[i] != NULL &&
			current->forward[i]->key < key)
			current = current->forward[i];
		update[i] = current;
	}
	current = current->forward[0];
	if (current == NULL || current->key != key) {
		// Generate a random level for node
		int rlevel = randomLevel();
		if(rlevel > level) {
			for(int i=level+1;i<rlevel+1;i++)
				update[i] = header;
			// Update the list current level
			level = rlevel;
		}
		// create new node with random level generated
		Node* n = createNode(key, rlevel);
		// insert node by rearranging pointers
		for(int i=0;i<=rlevel;i++) {
			n->forward[i] = update[i]->forward[i];
			update[i]->forward[i] = n;
		}
		cout<<"Successfully Inserted key "<<key<<"\n";
	}
};
// Delete element from skip list
void SkipList::deleteElement(int key) {
	Node *current = header;
	// create update array and initialize it
	Node *update[MAXLVL+1];
	memset(update, 0, sizeof(Node*)*(MAXLVL+1));
	for(int i = level; i >= 0; i--) {
		while(current->forward[i] != NULL &&
			current->forward[i]->key < key)
			current = current->forward[i];
		update[i] = current;
	}
	current = current->forward[0];
	// If current node is target node
	if(current != NULL and current->key == key) {
		for(int i=0;i<=level;i++) {
			if(update[i]->forward[i] != current)
				break;
			update[i]->forward[i] = current->forward[i];
		}
		// Remove levels having no elements
		while(level>0 &&
			header->forward[level] == 0)
			level--;
		cout<<"Successfully deleted key "<<key<<"\n";
	}
};
// Search for element in skip list
void SkipList::searchElement(int key) {
	Node *current = header;
	for(int i = level; i >= 0; i--) {
		while(current->forward[i] &&
			current->forward[i]->key < key)
			current = current->forward[i];
	}
	current = current->forward[0];
	if(current and current->key == key)
		cout<<"Found key: "<<key<<"\n";
};
// Display skip list level wise
void SkipList::displayList() {
	for(int i=0;i<=level;i++) {
		Node *node = header->forward[i];
		cout<<"Level "<<i<<": ";
		while(node != NULL) {
			cout<<node->key<<" ";
			node = node->forward[i];
		}
		cout<<"\n";
	}
};
// Driver to test above code
int main() {
	// Seed random number generator
	srand((unsigned)time(0));
	// create SkipList object with MAXLVL and P
	SkipList lst(3, 0.5);
	lst.insertElement(3);
	lst.insertElement(6);
	lst.insertElement(7);
	lst.insertElement(9);
	lst.insertElement(12);
	lst.insertElement(19);
	lst.insertElement(17);
	lst.insertElement(26);
	lst.insertElement(21);
	lst.insertElement(25);
	lst.displayList();
	//Search for node 19
	lst.searchElement(19);
	//Delete node 19
	lst.deleteElement(19);
	lst.displayList();
}

OUTPUT:
Successfully Inserted key 3
Successfully Inserted key 6
Successfully Inserted key 7
Successfully Inserted key 9
Successfully Inserted key 12
Successfully Inserted key 19
Successfully Inserted key 17
Successfully Inserted key 26
Successfully Inserted key 21
Successfully Inserted key 25
Level 0: 3 6 7 9 12 17 19 21 25 26 
Level 1: 3 6 7 9 12 17 19 21 25 26 
Level 2: 6 7 17 19 21 
Level 3: 6 17 21 
Found key: 19
Successfully deleted key 19
Level 0: 3 6 7 9 12 17 21 25 26 
Level 1: 3 6 7 9 12 17 21 25 26 
Level 2: 6 7 17 21 
Level 3: 6 17 21 
